{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\ftech Symbol;\f3\fswiss Helvetica;\f2\fmodern Ohlfs;}
\paperw15500
\paperh13540
\margl120
\margr0
\f0\b0\i0\ul0\ql\fs24\fi0\li0\gray0\up0\dn0 Release 2.0  Copyright 
\f1 ã
\f0 1991 by NeXT Computer, Inc.  All Rights Reserved.\
\

\pard\tx2620\tx3120\tx3620\fs16\li2100 \
\

\fs28 \

\fs16 \
\

\fs28 \

\fs16 \
\

\fs28 \

\fs16 \
\

\fs28 \

\fs16 \
\

\pard\fs56\li2100 Chapter 3\
User Actions:  The Keyboard and Mouse\

\fs16 \
\
\
\
\
\
\
\
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 Users give instructions to the computer through their actions on the mouse (or a comparable pointing device) and keyboard.\

\fs16 \
\

\fs28 In general, the keyboard is needed only to enter text.  The mouse is used for all other operations, such as using controls and making selections.  However, for the user's convenience, many operations can also be accomplished using the keyboard.  The keyboard is also the only way to access certain computer-wide functionality, such as turning the power on and off.\

\fs16 \
\

\i\fs28 \

\fs16 \
\

\b\i0\li100 \
\
\

\fs36 How the Keyboard and Mouse Work\

\fs16 \
\

\b0\fs28\li2100 This section describes how the keyboard and mouse are used in NeXTstep.  It also describes how the user can make selections using the mouse and keyboard.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 The Keyboard\

\fs16 \
\

\b0\li0 \

\fs28 \

{\li2120{\NeXTGraphic854 F11.eps \width9400 \height3220
}
,}\f0\b0\i0\ul0\ql\fs28\fi0\li0\gray0\up0\dn0 \

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 The NeXT keyboard resembles a conventional typewriter, with the usual keys in their traditional locations.  However, the keyboard also has many keys that aren't found on typewriters, including the Command, Alternate, and Control keys and a set of keys arranged in a calculator-style numeric keypad.  The behavior of each key is documented in the 
\i User's Reference Manual
\i0 .  Behavior that plays an important role in the user interface is discussed below.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Modifier Keys\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The keyboard's Shift, Command, Control, and Alternate keys are 
\i modifier keys
\i0 :  They change the effect of a keyboard or mouse action.  For example, Shift-3 yields ª#º, and Command-c issues a Copy command.  Unlike character keys, modifier keys by themselves don't generate characters.  \

\fs16 \
\

\fs28 To use a modifier key, the user must hold the key down and, while keeping it down, press the key (or perform the mouse action) to be modified.  More than one modifier key may be used at a timeÐfor example, Command-Alternate-3.\

\fs16 \
\

\fs28 The modifier keys and their effects when used with other keys are presented below.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	The Shift key modifies keystrokes to produce the uppercase character on letter keys and the upper character on two-character keys.  Pressing Command-Shift, and releasing the Shift key before another key is pressed, sets Alpha Lock, which in turn illuminates the green light in the Shift key.  Alpha Lock turns on Shift for letter keys only.  To turn Alpha Lock off, the user presses and releases Command-Shift again.\

\fs16 \
\

\fs28 ·	The Alternate key modifies keystrokes to produce an alternate character to the one that appears on the key; in general, these are special characters that are used relatively infrequently.  To find out which alternate characters are generated by which keys, see the
\i  User's Reference Manual
\i0 .\

\fs16 \
\

\fs28 ·	The Control key modifies keystrokes to produce standard ASCII control characters.  Some control characters are generated by single character keysÐfor example, Tab is Control-I, Return is Control-M, and backspace (Shift-Delete) is the same as Control-H.\

\fs16 \
\

\fs28 ·	The Command key provides a way of choosing commands with the keyboard rather than the mouse.  As an alternative to clicking a menu command with the mouse, the user can press the Command key in conjunction with the character displayed in the menu next to that command.  Some standard commands are marked in green on the front of the keys which (unshifted) are the keyboard alternatives for those commands.  For example, Command-c chooses the Copy command.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\li2100 \
\

\pard\f3\li2620 \

{\li2120{\NeXTGraphic3366 EPS13_1.eps \width13760 \height660
}
,}\f3\b0\i0\ul0\ql\fs16\fi0\li2620\gray0\up0\dn0 \

\b\fs28 Writing Note:  Referring to Modified Keys\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs24\li2620 Control characters are traditionally indicated by uppercase lettersÐfor example, Control-H.  This doesn't mean, however, that the Shift key must be used in conjunction with the Control key.  Control-H when produced with the Shift key down (or in Alpha Lock) is the same as Control-H when produced without the Shift key.\

\fs16 \

\fs24 The Command and Alternate keys, on the other hand, distinguish between shifted and unshifted characters; Command-H isn't the same as Command-h, and Alternate-H isn't the same as Alternate-h.\

\fs16 \

\fs24 Since Alpha Lock doesn't produce uppercase characters when the Command key is pressed, it's recommended that ªCommand-Shift-Hº (rather than ªCommand-Hº) be used to note the uppercase Command character in user documentation.  The inclusion of ªShiftº is a reminder to the user to manually press the Shift key.\

\fs16 \

\fs24 In contrast, Alpha Lock works with the Alternate key.  Uppercase Alternate characters therefore don't require an explicit mention of the Shift key; documentation should use the simpler ªAlternate-Hº instead of ªAlternate-Shift-H.º\

\fs16 \

\pard \

{\li2120{\NeXTGraphic4467 EPS14_1.eps \width13760 \height660
}
,}\f3\b0\i0\ul0\ql\fs16\fi0\li0\gray0\up0\dn0 \

\pard\tx2620\tx3120\tx3620\f0\li2100 \
\

\pard\b\li2100 \
\
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 \

\pard\b\li2100 Keyboard Alternatives\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 A graphical user interface is easy for most people to learn and remember.  Objects have a familiar look on the screen and behave in a way that's reminiscent of the real-world objects they emulate.  However, many users find it faster and easier to operate graphical objects using the keyboard rather than the mouse.  For this reason, it's often appropriate to provide keyboard alternatives to the mouse, at least for common operations.\

\fs16 \
\

\fs28 Keyboard alternatives consist of a single keystroke, modified by the Command key (and possibly another modifier key).  The Command key is required so that keystrokes that make something happen (give commands) are clearly separated from those that enter data (cause typing to appear).\

\fs16 \
\

\fs28 Keyboard alternatives are most often used for menu commands, although they're permitted in a panel's buttons and pull-down lists, as well. \

\fs16 \
\

\fs28 Although keyboard alternatives are tied to a graphic representation, they don't require the representation to be on-screen.  Keyboard alternatives for menu commands and panel buttons work even if the menu or panel is hidden.\

\fs16 \

\fs28 \

\fs16 \
\

\pard\f3\li2620 \

{\li2120{\NeXTGraphic5594 EPS7_1.eps \width13760 \height660
}
,}\f3\b0\i0\ul0\ql\fs16\fi0\li2620\gray0\up0\dn0 \

\b\fs28 Programming Note:  The Keyboard\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs24\li2620 For most applications, keyboard input is handled automatically.  Text entry and display are handled by the Application Kit's Text object, and keyboard alternatives are automatically converted into clicks on their associated control.  All you have to do is choose the keyboard alternatives (as discussed later in this chapter) and specify them in Interface Builder.\

\fs16 \

\fs24 You'll need to handle keyboard input if your application doesn't use the Text object for its text entry.\

\fs16 \

\pard \

{\li2120{\NeXTGraphic6102 EPS12_1.eps \width13760 \height660
}
,}\f3\b0\i0\ul0\ql\fs16\fi0\li0\gray0\up0\dn0 \

\pard\tx2620\tx3120\tx3620\f0\li2100 \
\
\

\pard\b\li1100 \
\
\

\pard\tx2620\tx3120\tx3620\b0\li2100 \
\

\pard\b\fs36\li1100 The Mouse\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The mouse controls the movement of the cursor on-screen.  Typically, the user moves the cursor over an object in the workspace and presses a mouse button to make something happen.  With the mouse, the user can edit documents, rearrange windows, and operate any control; the mouse is the essential tool of a graphical interface.\

\fs16 \
\

\fs28 Users can manipulate the mouse in just two ways:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	Move it to position the cursor.  The standard arrow cursor ªpoints toº the object touched by its tip.  (The cursor is also said to be positioned ªoverº the object at its tip.)\

\fs16 \
\

\fs28 ·	Press and release the mouse buttons.  The NeXT mouse has two buttons, one on the right and one on the left.  Initially, both buttons work alike, but they can be differentiated by the Preferences application (see ªLeft and Right Orientationº below).\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 From these two simple actions, a few basic mouse operations are derived:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	Clicking \
·	Multiple-clicking \
·	Dragging \
·	Pressing\

\pard\b\fs16\li2100 \
\
\
\
\

\fs28 Clicking\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The user 
\i clicks
\i0  an object by positioning the cursor over it, then pressing and releasing a mouse button.  Usually the mouse isn't moved during a click, and the mouse button is quickly released after it's pressed.  However, timing generally isn't important; what's important is what object the cursor is over when the mouse button is pressed and released.\

\fs16 \
\

\fs28 Clicking is used to pick an object or a location on the screen.  If the object is a window, the click brings it to the front and may select it to receive characters from the keyboard.  If the object is a menu command, button, or other control, the click performs the control's action.  In text, a click selects the 
\i insertion point
\i0  (the place where the user's typing will be entered).  In a graphics editor, it may select the location for a Paste command.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Multiple-Clicking\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The user 
\i double-clicks
\i0  an object by positioning the cursor over it, then quickly pressing and releasing a mouse button twice in succession.  The mouse button must be pressed the second time within a short interval of the first, or the action will count as two successive clicks rather than a double-click.  In addition, the cursor can't move significantly during the interval; this is to guarantee that the double-click remains focused on a single location on-screen.\

\fs16 \
\

\fs28 With the Preferences application, users can set the maximum length of the time interval to suit their individual needs.\

\fs16 \
\

\fs28 The user 
\i triple-clicks
\i0  an object by rapidly pressing and releasing a mouse button three times in succession.  The time interval between successive clicks and the distance the cursor can move between the first and the last click are subject to the same constraints that apply to a double-click.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Dragging\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The user 
\i drags
\i0  by pressing a mouse button and moving the mouse (and cursor) while the button is down.  \

\fs16 \
\

\fs28 In general, every dragging action implies a click; the mouse button goes down to initiate dragging and back up again to end it.  If an object responds to both clicking and dragging, every time it's dragged it will also respond to the click.  (See ªWhen to Act on a Double-Click Instead of a Single Click,º later in this chapter, for the only exception to this rule.)   Dragging a window, for example, also brings it to the front.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Pressing\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The user 
\i presses
\i0  an object on-screen by positioning the cursor over it, pressing a mouse button, and holding the button down for a period of time.  Although pressing implies clicking (since the mouse button must be released sometime), an object is said to be pressed rather than clicked if releasing the mouse button too soon would cut the action short. \

\fs16 \
\

\fs28 Control objects that respond to pressing act immediately when the mouse button is pressed; they don't wait for the button to go up.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Mouse Responsiveness\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The cursor moves on-screen when the user moves the mouse; but the ratio of the two movements isn't one-to-one.  Rapid mouse movements move the cursor farther than slow ones.  Users can set the 
\i mouse scaling
\i0 , how responsive the cursor is to mouse movements at different speeds, with the Preferences application.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Left and Right Orientation\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 To start, the two buttons of the mouse work identically; either button can be used for the ordinary operations of clicking, dragging, and pressing.\

\fs16 \
\

\fs28 The two buttons can be differentiated with the Preferences application.  Users can enable one of the buttons, either the right or the left, for the special function of bringing the main menu to the cursor.  (See ªBringing the Main Menu to the Cursorº in Chapter 6, ªMenus,º for details.)  Thereafter, the enabled button has only that function; it can't be used for ordinary mouse operations.  This leaves the other button as the one that will be primarily used.\

\fs16 \
\

\pard\b\li1100 \
\
\

{\f3\b0\li2120{\NeXTGraphic10855 EPS15_1.eps \width13760 \height660
}
,}\f3\b0\i0\ul0\ql\fs16\fi0\li2620\gray0\up0\dn0 \

\b\fs28 Programming Note:  The Mouse\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs24\li2620 All the controls provided by the Application Kit automatically turn the mouse actions they recognize (such as clicks) into the result specified by the programmer (such as bringing up a panel).  The Text object also automatically receives and reacts to mouse actions such as clicks, double-clicks, triple-clicks, and dragging actions.\

\fs16 \

\fs24 If you implement a custom control or a custom content area, you'll probably have to write code to handle the mouse actions that the control or area responds to.\

\fs16 \

\pard \

{\li2120{\NeXTGraphic11385 EPS10_1.eps \width13760 \height660
}
,}\f3\b0\i0\ul0\ql\fs16\fi0\li0\gray0\up0\dn0 \

\pard\tx2620\tx3120\tx3620\f0\li2100 \
\

\fs28 \

\fs16 \
\

\pard\b\fs36\li1100 Selection\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Users select graphical objects by clicking and dragging with the mouse.  A variety of objects can be selected, including:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	Windows\
·	Tools in a palette\
·	Cells in a matrix or fields in a form\
·	Icons in a file viewer\
·	Items in a list (of files or mail messages, for example)\
·	Characters in editable text\
·	Graphical elements of editable artwork\

\pard\tx2620\tx3120\tx3620\fs16\li2100 \
\

\fs28 Selecting an object simply picks it out and distinguishes it from others of the same type; it doesn't change the object in any way.  Most selections pick out targets for subsequent actions in the targeted-action paradigm.\

\fs16 \
\

\fs28 If users are allowed to insert new material into a display, they can select not only objects already displayed, but also locations for the insertions.  For example, it's possible to select either characters that have already been typed into a text field or the point where new typing should appear.\

\fs16 \
\

\i\fs28 \

\fs16 \
\

\i0\fs28 This section concentrates on how selections are made in editable material, but the rules often carry over to other types of selection as well.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Dragging to Select\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Dragging selects everything in the range defined by the anchor point (where the cursor was located when the mouse button was pressed) and the end point (the cursor's location when the mouse button is released).\

\fs16 \
\

\fs28 What ªeverything in the rangeº means depends on the type of material selected, as described in ªThe Range that Dragging Should Select,º later in this chapter.  \

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Clicking to Select\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 If the anchor point and end point are substantially the sameÐas they are for a clickÐthe user's action may sometimes select the item under the cursor and sometimes simply select that location.  In a graphics editor, for example, a click can select an existing figure or a location to insert a new one.\

\fs16 \
\

\fs28 In text, a click always selects a locationÐan insertion pointÐwhere characters can be entered from the keyboard.  The insertion point is normally marked by a blinking vertical bar located between characters.  If the user clicks on top of a character, the insertion point is adjusted to the nearest character boundary.  Clicking in a margin, or in an empty area away from any text, puts the insertion point next to the nearest character in series.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Multiple-Clicking to Select\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Although a single click selects only an insertion point in text, multiple-clicking selects characters already inserted.  A multiple-click always selects a linguistically meaningful unit.  Normally, double-clicking selects a word, and triple-clicking selects a paragraph (all the text between return characters).\

\fs16 \
\

\fs28 If the user drags from a multiple-click, additional units of the same type are selected.  For example, double-clicking a word selects the word; dragging from the double-click then selects every other word that's even partially within the range defined by the anchor and end points.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Extending the Selection\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Normally, as soon as users commit themselves to a new selection by pressing a mouse button (to begin clicking or dragging), the current selection is canceled in favor of the new one.  However, when the Alternate or Shift key is held down, the current selection is extended, not canceled.\

\fs16 \
\

\pard\b\i\li2100 \
\
\

\fs28 Continuous Extension\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\i0\fs28\li2100 Clicking and dragging with the Alternate key down results in a new selection that's a continuation of the previous one.  The new selection includes the previous selection and everything lying between it and the location of the cursor when the user releases the mouse button.  The Alternate key is thus an alternative to dragging as a way of selecting a rangeÐthe user can click to establish an anchor point, hold down the Alternate key, and click again to determine the end point.\

\fs16 \
\

\fs28 If the previous selection is already a range, Alternate-clicking and Alternate-dragging move the edge of selection that's closest to the cursor when the mouse button goes down to the cursor's location when the mouse button goes up.  The Alternate key thus also provides a way of adjusting the boundaries of the previous selection.  Alternate-clicking outside a selected range extends the range to the point of the click.  Alternate-clicking inside a selected range repositions the closest edge of the selection to the point of the click.\

\fs16 \
\

\pard \

\fs28 \

{\li2120{\NeXTGraphic15607 F2.eps \width6180 \height2660
}
,}\f0\b0\i0\ul0\ql\fs28\fi0\li0\gray0\up0\dn0 \

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 If the current selection is the result of a multiple-click, the Alternate key extends it just as dragging would.  Double-clicking a word, holding the Alternate key down, and clicking another word elsewhere in the text extends the selection to include both words and all those between.\

\fs16 \
\

\pard\b\i\li2100 \
\
\

\fs28 Discontinuous Extension\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\i0\fs28\li2100 The Shift key lets users add to, or subtract from, the current selection.  Additions don't have to be continuations of the current selection, so discontinuous selections can result.\

\fs16 \
\

\pard\b\fs28\li2100 Note:  
\b0 Discontinuous selection is common for editable graphics, icons, and items arranged in a list.  It usually isn't implemented for normal text.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 To add to the selection, the user clicks and drags as usual while holding the Shift key down.  New material is selected, but the previous selection also remains.  This is illustrated in the middle column of the following figure.\

\fs16 \
\

\pard \

\fs28 \

{\li2120{\NeXTGraphic16494 F3.eps \width6220 \height2620
}
,}\f0\b0\i0\ul0\ql\fs28\fi0\li0\gray0\up0\dn0 \

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 To subtract from the selection, the user holds the Shift key down while clicking or dragging over the current selection.  Shift-clicking and Shift-dragging deselect material that's already been selected.  While keeping the Shift key down, the user can first select material, then deselect it, then select it again.\

\fs16 \
\

\fs28 Shift-dragging either selects or deselects; it never does both.  Which it does depends on the item under the cursor when the mouse button goes down:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	If the item isn't currently part of the selection, Shift-dragging serves to select it and everything the user drags over.  It won't deselect material that happens already to be selected.\

\fs16 \
\

\fs28 ·	If the item is currently selected, Shift-dragging deselects it and any other selected material that's dragged over.  It won't add unselected material to the selection.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 How the Arrow Keys Affect a Text Selection\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 In text, the keyboard's arrow keys are used to position the insertion point or, when modified by the Alternate key, alter the selection.  But unlike the mouse, which can select anywhere within a document, the arrow keys operate only relative to the current selection.  The descriptions below assume that the current selection, before the user touches an arrow key, is a range of text.  The simpler case where the current selection is not a range but an insertion point is not directly addressed, but can easily be derived from the descriptions given.\

\fs16 \
\

\pard\b\fs28\li2100 Note:  
\b0 The arrow keys have nothing to do with the cursor, which is controlled only by the user's mouse movements.  \

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 When used alone (without a modifier key), the left arrow key positions the insertion point one character before the beginning of the current selection.  The right arrow key puts the insertion point one character beyond the end of the current selection.  These keys move the insertion point to the previous or next line if necessary.\

\fs16 \
\

\fs28 The up arrow key puts the insertion point one line above the beginning of the current selection, and the down arrow key puts it one line below the end of the current selection.  As the up and down arrow keys move it from line to line, the insertion point maintains the same approximate distance from the left margin.  It falls at the end of any line that's shorter than that distance, but comes back out to the original distance when a line that's long enough is encountered.\

\fs16 \
\

\fs28 More information on handling the arrow keys is in the ªImplementing Special Keysº section of this chapter.  Modified arrow keysÐfor example, Alternate-arrowÐare discussed in ªImplementing the Modified Arrow Keys,º later in this chapter.\

\fs16 \
\

\pard\b\li100 \
\
\

{\f3\b0\li2120{\NeXTGraphic19103 EPS8_1.eps \width13760 \height660
}
,}\f3\b0\i0\ul0\ql\fs16\fi0\li2620\gray0\up0\dn0 \

\b\fs28 Programming Note:  Selection\

\fs16 \

\pard\tx3120\tx3620\tx4120\b0\fs24\li2620 The Text object and browser implementation in the Application Kit both provide almost all the selection mechanisms described in the ªSelectionº section.  (The exception:  The Text object doesn't implement discontinuous selection.)  However, if you define your own selectable data, you'll have to implement selection yourself.\

\fs16 \

\pard \

{\li2120{\NeXTGraphic19463 EPS9_1.eps \width13760 \height660
}
,}\f3\b0\i0\ul0\ql\fs16\fi0\li0\gray0\up0\dn0 \

\pard\tx2620\tx3120\tx3620\f0\li2100 \
\

\fs28 \

\fs16 \
\

\pard\b\fs36\li100 Implementing Special Keys\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 This section describes how your application should handle certain special keys and key combinations, including keyboard alternatives.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 Special Character Keys\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Several special character keys, listed below, generate characters that typically perform a functionÐthe character causes the application to make something happen.  Exactly what happens depends on the application; some typical functions are mentioned here.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	The Return key moves the insertion point or prompt to the beginning of the next line, much like the carriage return of a typewriter.  When data is entered in a text field or form, Return informs the application that the data is ready for processing.\

\fs16 \
\

\fs28 ·	The Enter key, like Return, signals that data is ready for processing.  It need not move an insertion point or prompt to the beginning of the next line.  (Enter can also be generated with Command-Return.)\

\fs16 \
\

\fs28 ·	The Delete key removes the preceding character in text or deletes the current selection.  Shift-Delete generates the backspace character, which moves the insertion point back one character.  In most applications, backspace performs the same functions as Delete.\

\fs16 \
\

\fs28 ·	The Tab key moves forward to the next tab stop, or to the next text field in sequence.  Shift-Tab moves backward to the previous tab stop or text field.\

\fs16 \
\

\fs28 ·	The arrow keys move the symbol that's used in some contexts to track where the user is writing or entering dataÐfor example, the insertion point in a document processor.  The arrow keys' behavior is described in ªHow the Arrow Keys Affect a Text Selection,º above, and in ªImplementing the Modified Arrow Keys,º below.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 For UNIX compatibility, the Esc key is used to complete file names (as described in the following section).  It should not be used any other way in the user interface.\

\fs16 \
\

\b \
\
\

\fs28 Handling Arrow Characters\

\fs16 \
\

\b0\fs28 Because the arrow keys generate the same character codes as the Symbol font's arrow characters, text objects should check which key generated the character.  The arrow keys never produce visible arrow characters.  However, when a non-arrow key (perhaps modified by the Alternate key) produces an arrow character code, it 
\i should
\i0  produce visible arrow characters, and not result in arrow key functionality.\

\fs16 \
\

\fs28 For example, Alternate-F should produce a visible left arrow symbol, as shown in the 
\i User's Reference Manual
\i0 , instead of moving the insertion point left one character.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 Special Command-Key Combinations\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 A handful of Command-key combinations produce special effects.  Some play a particular role in the user interface; others, in effect, give commands to the computer itself, rather than to just one application.  They can't be used for other functions than those listed below.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	Command-. (period) should let users abort the current operation in the active application.  Although the Application Kit has code to support Command-., it isn't automatic; an application must ask for this functionality\

\fs16 \
\

\fs28 ·	Command-space should be used for file name completion.  In contexts where it's appropriate for the user to type a file name (such as in a Workspace Manager window or an Open panel), Command-space displays as many characters as match all possible file names in the directory.  If the user first types enough characters to identify a particular file and then presses the space bar with the Command key down, the remaining characters of the file name are filled in.  (In many applications, the Esc key also performs file name completion.)\

\fs16 \
\

\fs28 ·	Command-Shift sets and unsets Alpha Lock, but only when the Shift key is released before another key is pressed. \

\fs16 \
\

\fs28 ·	Command-Return is the same as Enter.\

\fs16 \
\

\fs28 ·	Command-volume down turns the speaker off and on.  (Volume down is a system control key on the keyboard.)\

\fs16 \
\

\fs28 ·	Command-Command-`, produced by holding both Command keys down and pressing the key at the upper left of the numeric keypad, generates an NMI (nonmaskable interrupt).  It brings up the NMI monitor window.\

\fs16 \
\

\fs28 ·	Command-`, produced with just the Command key to the right of the space bar, displays a panel that gives the user the option of restarting the computer, turning the power off, or cancelling the command.\

\fs16 \
\

\fs28 ·	Command-Alternate-*, produced by pressing the Command and Alternate keys at the lower left of the keyboard in conjunction with the * key on the keypad at the upper right, performs a reset to reboot the machine.  The reset is immediate; no panel or monitor gives the user the option of cancelling the instruction.\

\fs16 \
\

\pard\b\fs28\li2100 Note:  
\b0 These Command-key combinations aren't keyboard alternatives, since they don't correspond to any on-screen object.\

\fs16 \
\

\b\li1100 \
\
\

\fs36 Choosing Keyboard Alternatives\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Initially, until the user specifies a different preference, applications should follow the guidelines for keyboard alternatives described in this section.  Users can use the Preferences application to alter the keyboard alternatives for every application at once.  You're also encouraged to let the user choose and change keyboard alternatives using your application's Preferences panel.\

\fs16 \
\

\fs28 The guidelines place keyboard alternatives into three groupsÐreserved, required, and recommended.  These groups are listed in the tables below along with the commands they perform and the menus where the commands are located.  (See ªStandard Menus and Commandsº in Chapter 6 for more information on the listed commands and menus.)\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Reserved Keyboard Alternatives\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Reserved keyboard alternatives must be used for the commands listed below, and cannot be used for any others.  If your application implements the functionality that a command represents, it must provide both the command and the keyboard alternative.\

\fs16 \
\

\fs28 For example, if your application opens files, it must have an Open command with Command-o as the keyboard alternative.  If your application doesn't allow the user to open files, it won't have an Open command and must not use Command-o as a keyboard alternative.  \

\fs16 \
\

\pard\tx6140\tx9160\b\fs28\li2620 Keyboard Alternative	Command	Menu\

\pard\tx6140\tx6140\tx9160\tx9160\b0\li2620 Command-a	Select All	Edit menu\
Command-c	Copy	Edit menu\
Command-h	Hide	main menu\
Command-n	New	Document menu\
Command-o	Open	Document menu\
Command-p	Print	main menu\
Command-q	Quit	main menu\
Command-s	Save	Document menu\
Command-v	Paste	Edit menu\
Command-w	Close Window	Windows menu\
Command-x	Cut	Edit menu\
Command-z	Undo	Edit menu\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Required Keyboard Alternatives\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 These keyboard alternatives must be used if the application implements the command.  For example, if your application has a Find panel, you must provide Command-f as a way of bringing the panel up.\

\fs16 \
\

\fs28 However, if an application doesn't implement the particular functionality of an item (if it doesn't have a Find panel, for example), it can use the keyboard alternative (Command-f) for something else.  Nevertheless, to preserve inter-application consistency, it's strongly recommended that you first try to use characters that don't overlap with those on this list.\

\fs16 \
\

\pard\tx6140\tx9160\b\fs28\li2620 Keyboard Alternative	Command	Menu\

\pard\tx6140\tx6140\tx9160\tx9160\b0\li2620 Command-=	Define in Webster	Services menu\
Command-;	Check Spelling	Edit menu\
Command-b	Bold (Unbold)	Font menu\
Command-d	Find Previous	Find menu\
Command-e	Enter Selection	Find menu\
Command-f	Find Panel	Find menu\
Command-g	Find Next	Find menu\
Command-i	Italic (Unitalic)	Font menu\
Command-t	Font Panel	Font menu\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Recommended Keyboard Alternatives\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 These keyboard alternatives must be used for a command if the command has a keyboard alternative.  If not, the key can be used for some other command.  For example, if the Miniaturize Window command has no keyboard alternative, Command-m can be used as a keyboard alternative for another command.  \

\fs16 \
\

\pard\tx6140\tx9160\b\fs28\li2620 Keyboard Alternative	Command	Menu\

\pard\tx6140\tx6140\tx9160\tx9160\b0\li2620 Command-?	Help	Info menu\
Command-1	Copy Ruler	Text menu\
Command-2	Paste Ruler	Text menu\
Command-3	Copy Font	Font menu\
Command-4	Paste Font	Font menu\
Command-j	Jump to Selection	Find menu\
Command-m	Miniaturize Window	Windows menu\
Command-r	Show Ruler	Text menu\
Command-Shift-S	Save As	Document menu\
Command-Shift-P	Page Layout	Format menu\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Creating Application-Specific Keyboard Alternatives\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The NeXTstep user interface is visual, so all operationsÐall menu commands and scrolling operations, for exampleÐhave a graphical representation on-screen and can be performed using the mouse.  Keyboard alternatives are just that:  alternatives.  They should never be used for operations that can't be performed using the mouse.\

\fs16 \
\

\fs28 The main consideration in deciding which operations should have keyboard alternatives is frequency of use.  It's better to assign a keyboard alternative to a frequently used command than to one that's used less often.  Infrequently used commandsÐsuch as the Info Panel commandÐshould never be assigned keyboard alternatives.\

\fs16 \
\

\fs28 Keyboard alternatives are allowed only for the commands in a menu, the buttons in a panel, or the items in a pull-down list.  The characters used as a keyboard alternatives must be displayed to the user in the menu, panel, or list.  Menus put them on the commands themselves and pull-down lists follow this example.  A panel can present the keyboard alternatives for its buttons in any way that's appropriate to the design of the panel.\

\fs16 \
\

\pard\b\fs28\li2100 Note:  
\b0 Pop-up lists should not have keyboard alternatives, since there's no way to display the keyboard alternative on the pop-up list's controlling button.  Instead, you can create menu commands that bring up the pop-up list's panel or window and then activate the appropriate item in the list.  (See Chapter 7, ªControls,º for information on pop-up lists.)\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 It's usually a good idea to assign keyboard alternatives to commands that are needed while working on the keyboard (for example, the commands in the Find menu).  The keyboard alternative frees users from having to switch their attention from the keyboard to the mouse and back again.\

\fs16 \
\

\fs28 You can also use keyboard alternatives to enable proficient users to work with one hand on the keyboard and the other on the mouse.  For example, Command-x, Command-c, and Command-v allow users to select with the mouse while carrying out cut, copy, and paste operations from the keyboard.  These keyboard alternatives free users from having to move the cursor out of the region where they're working just to click a command.\

\fs16 \
\

\fs28 If keyboard alternatives are assigned to any in a set of parallel commands for formatting or viewing data (for example, commands that sort a list of items in various ways), the command that restores the default should also be assigned a keyboard alternative.  The keyboard can then take the user to an alternative format and back to the default, rather than just half way.\

\fs16 \
\

\pard\b\fs28\li2100 Note:  
\b0 You don't need to assign a keyboard alternative to every command.  Remember that users can create their own global keyboard alternatives by using the Preferences application.  \

\fs16 \
\

\b\i \
\
\

\fs28 Choosing the Character\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\i0\fs28\li2100 Any character except period (.) and space can be used in a keyboard alternative.  If the character is a letter, it can be either uppercase or lowercase, although lowercase characters are preferred because they don't require the user to press two modifier keys (Shift and Command) at once.\

\fs16 \
\

\fs28 When choosing the character for a keyboard alternative, try to make it mnemonic.  If possible, it should be the first letter of the command it performs.  If it's closely related to a command that already has a keyboard alternative, then you might want to choose a character physically near the existing one.  \

\fs16 \
\

\fs28 For example, the Find command's keyboard alternative is Command-f, taken from the first letter of the command.  The Find command has two related commands:  Find Next and Find Previous.  The Find Next command's keyboard alternative (Command-g) was chosen because it's just to the right of the Find command's keyboard alternative.  Similarly, the Find Previous command's keyboard alternative (Command-d) is just to the left.  \

\fs16 \
\

\pard\b\i\li2100 \
\
\

\fs28 Using the Alternate Key\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\i0\fs28\li2100 If necessary, your application can use the Alternate key with the Command key for keyboard alternatives.  Using the Alternate key is not desirable; you should first exhaust all reasonable possibilities using the Command key alone or in combination with the Shift key before resorting to the Alternate key.\

\fs16 \
\

\fs28 But, when necessary, a keyboard alternative requiring the Alternate key can be used.  It should be displayed in italic.\

\fs16 \
\

\pard \

\fs28 \

{\li2120{\NeXTGraphic31759 F0.tiff \width2160 \height420
}
,}\f0\b0\i0\ul0\ql\fs28\fi0\li0\gray0\up0\dn0 \

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 The character displayed in italic is the one that would be typed if the Command and Alternate keys were not held down, not necessarily the character that's produced when the Alternate key is held down.\

\fs16 \
\

\pard\b\i\li2100 \
\
\

\fs28 Determining the Action that Is Performed\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\i0\fs28\li2100 A keyboard alternative should almost always accomplish exactly the same thing as the mouse action.  Even slight variations between a mouse action and its keyboard alternative run counter to the principle that every keyboard operation must match a corresponding mouse operation.  However, in some cases it's acceptable to have a keyboard alternative do just a bit more than the mouse operation.  These cases are rare and often go unnoticed by users because the difference is both subtle and intuitive.  The keyboard alternative simply does what the user wants, while also doing one or both of the following:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	reducing the number of clicks or keystrokes the user needs to perform\
·	eliminating the need to switch from the keyboard to the mouse and back again\

\pard\tx2620\tx3120\tx3620\fs16\li2100 \
\

\fs28 For example, the Edit application has a Find panel that's brought up by the Find Panel menu command or its Command-f keyboard alternative.  Usually, the panel stays up until the user explicitly closes it, since it can be used many times in a row.  However, a user who is concentrating on entering text often wants to find a word in a document but then doesn't want to use the Find panel for a while.  \

\fs16 \
\

\fs28 Edit accounts for both kinds of use by automatically closing the panel if the user is not likely to use the Find panel immediately.  It assumes that this is the case if the user doesn't use the mouse to conduct the search (instead, using Command-f to bring up the panel, and starting the search by pressing Return).  Edit's behavior lets users find a word using a minimum number of actions, and relieves them of having to switch to the mouse to bring the document window back in front of the Find panel.\

\fs16 \
\

\fs28 In general, you should start with all keyboard alternatives the same as their associated mouse action.  In the rare case when a keyboard alternative should be different from its associated mouse action, the need becomes clear through everyday use.\

\fs16 \
\

\pard\b\li100 \
\
\

\fs36 Implementing Mouse Actions\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 This section describes how to implement clicking and dragging for custom controls, application-specific document areas, and other custom objects.  You shouldn't need the information in this section if you use only the standard, NeXT-supplied objects.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 Reacting to Clicking\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 When the user clicks an object on-screen, the object should provide immediate graphic feedback to the user when the mouse button goes down.  However, depending on the intent of the click, the object may wait for the mouse button to go back up before doing anything more:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	If the click is intended to initiate a targeted action or choose a tool, then in general the object should act when the mouse button goes up.  This gives users an opportunity to change their minds.  If they move the cursor away from the object before releasing the button, the action is canceled.  Suppose, for example, that a user presses the mouse button while the cursor points to the Cut command in the Edit menu.  The command is highlighted, but nothing is cut until the mouse button is released.  If the user moves the cursor outside the menu before releasing the mouse button, the command won't be carried out.\

\fs16 \
\

\fs28 ·	If the click is intended to manipulate the object itself, the object should react immediately when the mouse button goes down.  For example, when a window is clicked, it comes to the front of the screen without waiting for the mouse button to go up.  Similarly, when editing text, the user is committed to a new selection as soon as the mouse button is pressed.\

\fs16 \
\

\pard\b\fs28\li2100 Note:  
\b0 You can implement multiple-clicks so that they act when the mouse button is pressed the second (or third) time, instead of waiting for the mouse button to go back up (as is usual for a single click).  This implementation can help improve the perceived speed of your application.
\i \

\fs16 \
\

\b\i0 \
\
\

\fs28 The First Click in a Window\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Clicking can be used not only to operate an object, but also simply to bring a window forward.  When the user clicks in a window that isn't already in front, a question arises concerning intent:  Did the user intend the click just to bring the window forward, or was it also intended to do some work within the window?  This question is addressed by the following guidelines:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	If the user chooses a particular controlÐsuch as a button or scrollerÐto click in, the click should not only bring the window forward, but should also operate the control.  Since controls are small, it's reasonable to assume that the user chose to click the control, not just the window.\

\fs16 \
\

\fs28 ·	If the click is just generally within the content area of the window, the click will bring the window forward but shouldn't have any result within the window.  Specifically, it shouldn't alter the current selection.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 However, if the user chooses to double-click within the content area of the window, the normal double-click action should be performed.  Double-clicking on a word should select the word whether the window is in front or not.  \

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 When to Act on a Double-Click Instead of a Single Click\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 In general, the main action associated with an object should be initiated on the basis of a single click, and dragging should perform a click.  However, sometimes it's inconvenient for dragging to result in the object's action.  There are three possible solutions to this problem:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	Require that a modifier key be pressed when dragging the object\
·	Implement the object so that dragging it doesn't perform a click\
·	Have a click do nothing, and have a double-click perform the object's action\

\pard\tx2620\tx3120\tx3620\fs16\li2100 \
\

\fs28 For the second solution to work (having dragging not perform a click), all of the following must be true:  \

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	The user gets clear visual feedback as to whether the object is reacting to a click or to dragging, and it's difficult for the user to do the wrong thing.  For example, the user might start to drag the object, but then decide to put it back; this action should not be treated as a click.\

\fs16 \
\

\fs28 ·	The single click's action matches similar uses of a single click elsewhere in the interface.  \

\fs16 \
\

\fs28 ·	The action initiated by the click doesn't have consequences that the user might want to avoid and can't easily be stopped or reversed.  (This condition is imposed because of the increased possibility that the user might erroneously click while intending to drag.)\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 For example, the main action associated with a docked application icon is the activation of the application, but the user can also move the icon by dragging it.  Because the user doesn't always want to activate the application when moving its icon, it isn't practical to have both  dragging and a single click activate the application. \

\fs16 \
\

\fs28 The first solution listed above (requiring a modifier key when dragging) isn't appropriate in this case.  Moving an icon is a basic, obvious operation, and unmodified dragging is the natural way to accomplish it.\

\fs16 \
\

\fs28 The second solution (having dragging not perform a click) also doesn't work, mainly because the action (activating an application) has consequences that the user might want to avoid (such as creating windows that cover the user's work) and that can't be reversed until the application is fully launched.  Also, having a single click perform the action doesn't match the behavior of application icons in the File Viewer.  In the File Viewer, a single click merely selects the application's file; it isn't launched until the user double-clicks it.\

\fs16 \
\

\fs28 So the only acceptable solution for docked application icons is for double-clicking to launch the application, while single-clicking does nothing.\

\fs16 \
\

\fs28 An example of where dragging doesn't imply a single click is in the File Viewer's shelf.  When the user clicks the icon of a folder on the shelf, the File Viewer changes to show the folder's path.  However, when the user drags the icon off the shelf, the File Viewer does 
\i not
\i0  perform the click's actionÐit doesn't change the current path.  One of the reasons this solution works is that the shelf differentiates clicking from dragging by having a threshold for dragging.  Until the user drags the icon a certain amount, it doesn't move; once the user has committed to dragging the icon, it can't be clicked.  The icon also looks very different when it's clicked (it's highlighted) from when it's dragged (it moves, and a dimmed copy is visible in its old location).  \

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 When to Use Multiple-Clicking\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 You should use double-clicking only for actions that logically extend the action of a single click, and triple-clicking only for actions that extend a double-click.  There are two reasons for this rule, one philosophical, the other programmatic:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	Complex mouse actions are best remembered and understood when they appear to grow naturally out of simpler actions.\

\fs16 \
\

\fs28 ·	Every double-click includes a single click (the first click in the sequence), and every triple-click includes a double-click.  At the time an application receives one click, it can't know that any others are on their way.  So it must first act on the single click, then the double-click, then the triple-click.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 For example, double-clicking an icon in a Workspace Manager window picks out that icon just as a single click would.  It then goes on to open the application associated with the icon.  A single click in text selects an insertion point, a double-click extends the selection to a word, and a triple-click extends it further to a full line, sentence, or paragraph.\

\fs16 \
\

\fs28 Quadruple clicks (and above) become increasingly difficult for users to produce or understand.  They're neither used nor recommended in the NeXTstep user interface.  Triple-clicks should be used only sparingly.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Dragging from a Multiple-Click\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The act of pressing a mouse button to initiate dragging can be part (the last part) of a double-click or triple-click.  If the user doesn't immediately release the mouse button and begins dragging at the end of a multiple-click, the dragging action can be assigned a meaning that's related to the meaning of the multiple-click.\

\fs16 \
\

\fs28 For example, double-clicking selects a word in editable text, and dragging from a double-click selects additional words within a range of text.  If triple-clicking selects a line, dragging from a triple-click will select additional lines within the range.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 How to Use Dragging\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Dragging is used in a variety of situations, principally these three:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	To move an object, such as a window or the knob of a scroller\

\fs16 \
\

\fs28 ·	To define a range, usually to select the objects falling within the range\

\fs16 \
\

\fs28 ·	To slide from one object to another, in order to extend an action initiated in the first object to the second object\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Moving an Object\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The user can drag a movable object by positioning the cursor over it, pressing the mouse button, and moving the mouse while the button is down.  The object should move so that it remains aligned with the cursor on-screen.  If the object is constrained within a particular area or trackÐas is a scroller knob, for exampleÐit should remain as closely aligned with the cursor as possible.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Defining a Range\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 The user can also drag over an area or through a series of items (such as text characters) to define a range.  The position of the cursor when the mouse button is pressed is the 
\i anchor point
\i0 ; its position when the mouse button is released is the 
\i end point
\i0 .  The difference between the anchor point and end point determines the area or objects inside the range.\

\fs16 \
\

\fs28 Dragging to define a range is mostly used to make a selection (such as a string of text characters or a group of icons) for the targeted-action paradigm.\

\fs16 \
\

\fs28 When the user drags to define a rectangular range (as in a drawing program), applications often drag outÐor ªrubberbandºÐa rectangle to show the area covered between the anchor point and end point.  See ªThe Range that Dragging Should Select,º below, for more information on dragging to define a rectangular range. \

\fs16 \
\

\pard \

\fs28 \

{\li2120{\NeXTGraphic43847 F4.eps \width5820 \height2360
}
,}\f0\b0\i0\ul0\ql\fs28\fi0\li0\gray0\up0\dn0 \

\fs16 \
\

\b\li2100 \
\
\

\fs28 Sliding from Object to Object\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Sometimes, a group of closely related objects reacts to dragging as if the user clicked one of the objects.  No matter which object in the group was under the cursor when the mouse button was pressed, the object under the cursor when the mouse button is released is the one that's chosen.   (Normally, when an object isn't in a group, it's chosen only when the mouse button is both pressed and released while the cursor is over the object.)   \

\fs16 \
\

\fs28 For example, a user can choose a menu command by pressing the mouse button as the cursor points to one command and releasing it as it points to another.  Users can similarly drag from one tool to another tool when they're displayed together in a palette, or from button to button in a set of radio buttons.\

\fs16 \
\

\fs28 The grouped objects don't all have to be of the same type.  For example, a user can drag from a button that controls a pop-up list through the list to make a selection, or from a menu command that controls a submenu into the submenu.\

\fs16 \
\

\fs28 If the user can drag from one object to another in a group of objects, then this fact should be apparent from the objects are displayed.  Usually, such objects are displayed in a single row or column, as close to each other as possible.  For example, graphical radio buttons should be right up next to each other, to distinguish them from ordinary buttons.  (Graphical radio buttons are discussed in detail in Chapter 7.)\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 When to Use Pressing\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 For the most part, pressing is an alternative to repeated clicking.  It should be used wherever a control action can be repeated with incremental effect.  For example, clicking a scroll button scrolls one line of text, clicking the button again scrolls another line, and so on; pressing the scroll button scrolls lines repeatedly for a continuous action until the mouse button is released.\

\fs16 \
\

\fs28 Pressing is also used to initiate the action of sliding from one object to another.  If a button controls a pop-up list, the user presses the button and drags through the list to choose one of its options.  After pressing a menu command to attach a submenu, the user can drag into the submenu.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 Using Modifier Keys with the Mouse\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Applications can choose to assign a different meaning to mouse actions that occur when the user is holding down a modifier key.  Modified mouse actions should implement only optional or advanced features of the user interface (because they're harder to remember and require more coordination to produce).  They typically extend or alter the effect of the unmodified mouse action.  For example:\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\tx4120\fs28\fi-520\li2620 ·	Dragging a file icon from one directory window to another moves or copies the file to the new directory, depending on whether the directories are on the same disk or a different disk.  Command-dragging moves the file always.  Alternate-dragging copies the file always.  Control-dragging is similar to copying, but the new ªcopyº of the file is simply a link to the old copy.  The user can see what's going to happen because the cursor changes (to 
{\li2120{\NeXTGraphic46900 EPS6.eps \width320 \height320
}
,}\pard\tx2620\tx3120\tx3620\tx4120\f0\b0\i0\ul0\fs28\fi-520\li2620 , for example, when Alternate-dragging).\

\fs16 \
\

\fs28 ·	Clicking a scroll button scrolls a line of text; Alternate-clicking scrolls a larger amount.\

\fs16 \
\

\fs28 ·	Dragging a window by its title bar moves the window, brings it to the front, and activates its application; Alternate-dragging moves the window and brings it to the front, but doesn't activate its application.\

\fs16 \
\

\fs28 ·	Clicking selects a new insertion point in text; Alternate-clicking extends the selection to include everything between the current insertion point and the point of the click.  If an application implements discontinuous selection, Shift-clicking selects a new insertion point without dropping the old selection.  If discontinuous selection isn't implemented, Shift-clicking acts like Alternate-clicking.\

\fs16 \
\

\fs28 ·	Clicking selects an icon in a directory window; Shift-clicking adds new icons to the current selection.\

\fs16 \
\

\pard\b\fs28\li2100 Note:  
\b0 Alpha Lock doesn't work for Shift-clicking (or Shift-dragging); the Shift key must be held down manually.  This way, users won't find themselves Shift-clicking by mistake when they intend only to click.\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\fs28\li2100 Although applications can use the Control key to modify a mouse action, the other modifier keys are preferred for this wherever possible.\

\fs16 \
\

\fs28 Applications should avoid distinguishing between the left and right key of the Shift, Alternate, and Command pairs.  Users don't expect such a distinction except for certain computer-wide, potentially destructive operations, such as resetting the computer's processor.  Also, there's no hardware-independent way to differentiate the left and right modifier keys.\

\fs16 \
\

\pard\b\li100 \
\
\

\fs36 Managing the Cursor\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Cursor handling is largely handled by the Application Kit.  However, your application might need to hide the cursor or change its appearance, as described below.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 Changing the Cursor            
{\li2120{\NeXTGraphic48710 EPS5.eps \width420 \height240
}
,}\f0\b\i0\ul0\ql\fs36\fi0\li1100\gray0\up0\dn0 \

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 An application can change the cursor from the standard arrow (shown above) to any other image of an equal size (16 pixels by 16 pixels).  When doing so, it must specify what point in the cursor acts like the tip of the arrow.  That point, the cursor's 
\i hot spot
\i0 , should be apparent to the user from the shape of the image.  For example, if the cursor is an ªXº, the hot spot would be where the two lines cross.\

\fs16 \
\

\fs28 For some types of applications, a shape other than an arrow might be more convenient.  For example, an I-beam cursor (shown above) is handier for positioning between characters.  Its hot spot is in the center of the beam.\

\fs16 \
\

\fs28 It's often a good idea to change the shape of the cursor to indicate that the user has entered a mode.  In applications that use the modal-tool paradigm, the cursor should change to indicate which tool has been selected.  For example, the cursor might look like a pencil while thin lines are being drawn in a graphics application, or like a wide brush when painting in broad strokes.\

\fs16 \
\

\fs28 If mouse actions are valid only in a certain area, the cursor should revert to its normal shape when it leaves the area.  It's best not to change the cursor too often, however.  To avoid confusing the user, stick with the standard arrow wherever reasonable.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 Hiding the Cursor\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 A visible cursor is essential for mouse actions, but it can get in the way when the user is concentrating on using the keyboard.  Therefore, the Text object automatically hides the cursorÐmaking it disappear from the screenÐwhen the user begins entering text.  A hidden cursor returns to the screen as soon as the user moves the mouse, signaling a shift in attention away from the keyboard back to the mouse.\

\fs16 \
\

\fs28 The cursor should also be hidden whenever the user selects an insertion point or a range of text.  (This is not currently implemented by the Text object, so each application should do this for itself.)  A new selection is a good indication that the user is ready to begin typing again.  Hiding the cursor when the user selects a new insertion point avoids confusion between the I-beam cursor and the vertical bar representing the insertion point.  Unless it's hidden, the I-beam can obscure the vertical bar.  Again, the cursor reappears as soon as the user moves the mouse.\

\fs16 \
\

\pard\b\fs28\li2100 Note:  
\b0 In Display PostScript terminology, this is known as ªobscuringº the cursor.\

\fs16 \
\

\b\li100 \
\
\

\fs36 Implementing Selection\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 If your application has editable text or allows selection of multiple custom objects, then you need to read this section.  \

\fs16 \
\

\fs28 When implementing selection, make sure that your application never moves the selection out of the user's view.  If necessary, the display must scroll to make the new selection visible.  Of course, the user can choose to move the selection out of view, using a scroller.  But as soon as the user makes a new selection, such as by pressing an arrow key, the selection should scroll back into view.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 When Discontinuous Selection Isn't Implemented\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Sometimes an application implements selection for an area but doesn't implement discontinuous selection.  In this case, the application should make the Shift key act like the Alternate key during selection, so that both keys cause continuous selection.  \

\fs16 \
\

\fs28 For example, discontinuous selection is not implemented in the Application Kit's Text object, so both Shift-clicking and Alternate-clicking extend the selection continuously.  This saves the user from making errors due to pressing the wrong key when trying to extend the selection.\

\fs16 \
\

\pard\b\li1100 \
\
\

\fs36 The Range that Dragging Should Select\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 When the user drags a rectangle for the purpose of section, what is selected depends on the type of material.  In serially arranged materialÐsuch as characters in connected textÐthe selection includes the entire series between the anchor and end points.  For material consisting of objects that can be independently arrangedÐsuch as icons or the graphic elements that make up a pictureÐthe selection generally includes everything that's even partially within the rectangle defined by the anchor and end points.  The highlighted material below shows the difference between selection in text and graphics.\

\fs16 \
\

\pard \

\fs28 \

{\li2120{\NeXTGraphic52888 F1.eps \width7860 \height2400
}
,}\f0\b0\i0\ul0\ql\fs28\fi0\li0\gray0\up0\dn0 \

\fs16 \
\

\b\li1100 \
\
\

\fs36 Implementing the Modified Arrow Keys\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Applications that allow text selection are encouraged to implement the modifer-arrow combinations described in this section.  Modifier keys alter the basic behavior of the arrow keys, but retain the basic orientation of each of the four keys.  Before reading this section, you should understand the existing behavior of the unmodified arrow keys, described in ªHow the Arrow Keys Affect a Text Selectionº earlier in this chapter.  \

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Control-Arrow Combinations\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Modified by the Control key, the arrow keys move the insertion point to the edge of the current display.  The left arrow key puts the insertion point before the first visible character on the line where the current selection begins, and the right arrow key puts it after the last visible character on the line where the current selection ends.\

\fs16 \
\

\fs28 The up arrow key positions the insertion point in the first visible line of the display, directly above the beginning of the current selection.  The down arrow key puts the insertion point in the last visible line, directly below the end of the current selection.\

\fs16 \
\

\fs28 When the insertion point is already at the edge of the currently visible display, the Control-arrow combination that would otherwise move it to that edge first scrolls the display (by the amount of a page scroll), then moves the insertion point to the edge of the new display.  Once the insertion point reaches the beginning of a line, the right arrow key won't move it further (for example, to another line); the left arrow key won't move it once it reaches the end of a line.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Shift-Arrow Combinations\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Modified by the Shift key, the left arrow key positions the insertion point to the left of the current selection at the beginning of a word.  The right arrow key positions it to the right of the current selection at the end of a word.  Thus both keys move the insertion point from word to word.\

\fs16 \
\

\fs28 The up arrow key puts the insertion point at the beginning of the word one line directly above the beginning of the current selection.  The down arrow key puts it at the end of the word one line directly below the end of the current selection.  As the up and down arrow keys move the insertion point from line to line, they choose words that lie directly above or below the original starting point.  (In other words, the location of the insertion point can be calculated by the same rules that determine the edge of the selection when the user double-clicks and drags directly upward or directly downward.)\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Alternate-Arrow Combinations\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 Modified by the Alternate key, the arrow keys extend the current selection by one character or one line at a time.  Users choose which edge of the selection to modify by the arrow key they press first.\

\fs16 \
\

\fs28 When pressed first, the left arrow key moves the beginning of the current selection one character to the left (toward the beginning of the document).  Subsequently, the left and right arrow keys both act on this same edge of the selection, moving it one character to the left or right.  When pressed first, the right arrow key moves the end of the current selection one character to the right (toward the end of the document).  Subsequently, the left and right arrow keys both act on the end of the selection.\

\fs16 \
\

\fs28 When pressed first, the up arrow key moves the beginning of the current selection up one line.  Subsequently, the up and down arrow keys both move this same edge of the selection up and down a line.  When pressed first, the down arrow key moves the end of the current selection down one line.  Subsequently, the up and down arrow keys both move the end of the selection.\

\fs16 \
\

\pard\b\li2100 \
\
\

\fs28 Other Arrow Key Combinations\

\fs16 \
\

\pard\tx2620\tx3120\tx3620\b0\fs28\li2100 More than one modifier key can be used in combination with an arrow key, with additive results.  Thus, Shift-Alternate-right arrow extends the selection to the end of a word, and Control-Shift-up arrow places the insertion point at the beginning of a word in the first visible line of the display.\

\fs16 \
\

\fs28 When modified by the Command key, the up and down arrow keys reorder windows on the screen.  These key combinations are reserved by the system and cannot be used to position the insertion point in text.\

\fs16 \
\

\fs28 \
\

\fs16 \
\

\pard\f3\li2620 \
\

}
